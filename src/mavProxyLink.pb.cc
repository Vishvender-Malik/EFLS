// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mavProxyLink.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mavProxyLink.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mav {
class AircraftDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Aircraft>
     _instance;
} _Aircraft_default_instance_;
class WaypointsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Waypoints>
     _instance;
} _Waypoints_default_instance_;
class WaypointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Waypoint>
     _instance;
} _Waypoint_default_instance_;
class AircraftLinkDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AircraftLink>
     _instance;
} _AircraftLink_default_instance_;

namespace protobuf_mavProxyLink_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, bearing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, wind_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, wind_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, motor_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aircraft, motor_throttle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoints, waypoint_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, type_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AircraftLink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AircraftLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AircraftLink, aircrafts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AircraftLink, waypoints_),
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(Aircraft)},
  { 23, 29, sizeof(Waypoints)},
  { 30, 40, sizeof(Waypoint)},
  { 45, 52, sizeof(AircraftLink)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Aircraft_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Waypoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Waypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AircraftLink_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mavProxyLink.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Aircraft_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Aircraft_default_instance_);_Waypoints_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Waypoints_default_instance_);_Waypoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Waypoint_default_instance_);_AircraftLink_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AircraftLink_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022mavProxyLink.proto\022\003mav\"\261\001\n\010Aircraft\022\013"
      "\n\003lat\030\001 \002(\001\022\013\n\003lon\030\002 \002(\001\022\017\n\007bearing\030\003 \002("
      "\001\022\r\n\005speed\030\004 \002(\001\022\020\n\010altitude\030\005 \002(\001\022\022\n\nwi"
      "nd_speed\030\006 \002(\001\022\026\n\016wind_direction\030\007 \002(\001\022\025"
      "\n\rmotor_current\030\010 \002(\001\022\026\n\016motor_throttle\030"
      "\t \002(\001\",\n\tWaypoints\022\037\n\010waypoint\030\001 \003(\0132\r.m"
      "av.Waypoint\"S\n\010Waypoint\022\013\n\003lat\030\001 \002(\001\022\013\n\003"
      "lon\030\002 \002(\001\022\020\n\010altitude\030\003 \002(\001\022\r\n\005speed\030\004 \002"
      "(\001\022\014\n\004type\030\005 \002(\005\"S\n\014AircraftLink\022 \n\tairc"
      "rafts\030\001 \003(\0132\r.mav.Aircraft\022!\n\twaypoints\030"
      "\002 \003(\0132\016.mav.Waypoints"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mavProxyLink.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mavProxyLink_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Aircraft::kLatFieldNumber;
const int Aircraft::kLonFieldNumber;
const int Aircraft::kBearingFieldNumber;
const int Aircraft::kSpeedFieldNumber;
const int Aircraft::kAltitudeFieldNumber;
const int Aircraft::kWindSpeedFieldNumber;
const int Aircraft::kWindDirectionFieldNumber;
const int Aircraft::kMotorCurrentFieldNumber;
const int Aircraft::kMotorThrottleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Aircraft::Aircraft()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mavProxyLink_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mav.Aircraft)
}
Aircraft::Aircraft(const Aircraft& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&motor_throttle_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(motor_throttle_));
  // @@protoc_insertion_point(copy_constructor:mav.Aircraft)
}

void Aircraft::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motor_throttle_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(motor_throttle_));
}

Aircraft::~Aircraft() {
  // @@protoc_insertion_point(destructor:mav.Aircraft)
  SharedDtor();
}

void Aircraft::SharedDtor() {
}

void Aircraft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aircraft::descriptor() {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Aircraft& Aircraft::default_instance() {
  protobuf_mavProxyLink_2eproto::InitDefaults();
  return *internal_default_instance();
}

Aircraft* Aircraft::New(::google::protobuf::Arena* arena) const {
  Aircraft* n = new Aircraft;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Aircraft::Clear() {
// @@protoc_insertion_point(message_clear_start:mav.Aircraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&motor_current_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(motor_current_));
  }
  motor_throttle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Aircraft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mav.Aircraft)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double bearing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_bearing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bearing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double altitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double wind_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_wind_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double wind_direction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_wind_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double motor_current = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_motor_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motor_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double motor_throttle = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_motor_throttle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motor_throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mav.Aircraft)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mav.Aircraft)
  return false;
#undef DO_
}

void Aircraft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mav.Aircraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double lat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // required double bearing = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bearing(), output);
  }

  // required double speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  // required double altitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->altitude(), output);
  }

  // required double wind_speed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wind_speed(), output);
  }

  // required double wind_direction = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->wind_direction(), output);
  }

  // required double motor_current = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->motor_current(), output);
  }

  // required double motor_throttle = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->motor_throttle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mav.Aircraft)
}

::google::protobuf::uint8* Aircraft::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mav.Aircraft)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // required double lon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // required double bearing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bearing(), target);
  }

  // required double speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  // required double altitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->altitude(), target);
  }

  // required double wind_speed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wind_speed(), target);
  }

  // required double wind_direction = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->wind_direction(), target);
  }

  // required double motor_current = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->motor_current(), target);
  }

  // required double motor_throttle = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->motor_throttle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mav.Aircraft)
  return target;
}

size_t Aircraft::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mav.Aircraft)
  size_t total_size = 0;

  if (has_lat()) {
    // required double lat = 1;
    total_size += 1 + 8;
  }

  if (has_lon()) {
    // required double lon = 2;
    total_size += 1 + 8;
  }

  if (has_bearing()) {
    // required double bearing = 3;
    total_size += 1 + 8;
  }

  if (has_speed()) {
    // required double speed = 4;
    total_size += 1 + 8;
  }

  if (has_altitude()) {
    // required double altitude = 5;
    total_size += 1 + 8;
  }

  if (has_wind_speed()) {
    // required double wind_speed = 6;
    total_size += 1 + 8;
  }

  if (has_wind_direction()) {
    // required double wind_direction = 7;
    total_size += 1 + 8;
  }

  if (has_motor_current()) {
    // required double motor_current = 8;
    total_size += 1 + 8;
  }

  if (has_motor_throttle()) {
    // required double motor_throttle = 9;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Aircraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mav.Aircraft)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required double lat = 1;
    total_size += 1 + 8;

    // required double lon = 2;
    total_size += 1 + 8;

    // required double bearing = 3;
    total_size += 1 + 8;

    // required double speed = 4;
    total_size += 1 + 8;

    // required double altitude = 5;
    total_size += 1 + 8;

    // required double wind_speed = 6;
    total_size += 1 + 8;

    // required double wind_direction = 7;
    total_size += 1 + 8;

    // required double motor_current = 8;
    total_size += 1 + 8;

    // required double motor_throttle = 9;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aircraft::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mav.Aircraft)
  GOOGLE_DCHECK_NE(&from, this);
  const Aircraft* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Aircraft>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mav.Aircraft)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mav.Aircraft)
    MergeFrom(*source);
  }
}

void Aircraft::MergeFrom(const Aircraft& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mav.Aircraft)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000002u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      bearing_ = from.bearing_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      wind_speed_ = from.wind_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      wind_direction_ = from.wind_direction_;
    }
    if (cached_has_bits & 0x00000080u) {
      motor_current_ = from.motor_current_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_motor_throttle(from.motor_throttle());
  }
}

void Aircraft::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mav.Aircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aircraft::CopyFrom(const Aircraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mav.Aircraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aircraft::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void Aircraft::Swap(Aircraft* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Aircraft::InternalSwap(Aircraft* other) {
  using std::swap;
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(bearing_, other->bearing_);
  swap(speed_, other->speed_);
  swap(altitude_, other->altitude_);
  swap(wind_speed_, other->wind_speed_);
  swap(wind_direction_, other->wind_direction_);
  swap(motor_current_, other->motor_current_);
  swap(motor_throttle_, other->motor_throttle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Aircraft::GetMetadata() const {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Aircraft

// required double lat = 1;
bool Aircraft::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Aircraft::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void Aircraft::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void Aircraft::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
double Aircraft::lat() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.lat)
  return lat_;
}
void Aircraft::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.lat)
}

// required double lon = 2;
bool Aircraft::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Aircraft::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void Aircraft::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Aircraft::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
double Aircraft::lon() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.lon)
  return lon_;
}
void Aircraft::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.lon)
}

// required double bearing = 3;
bool Aircraft::has_bearing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Aircraft::set_has_bearing() {
  _has_bits_[0] |= 0x00000004u;
}
void Aircraft::clear_has_bearing() {
  _has_bits_[0] &= ~0x00000004u;
}
void Aircraft::clear_bearing() {
  bearing_ = 0;
  clear_has_bearing();
}
double Aircraft::bearing() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.bearing)
  return bearing_;
}
void Aircraft::set_bearing(double value) {
  set_has_bearing();
  bearing_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.bearing)
}

// required double speed = 4;
bool Aircraft::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Aircraft::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void Aircraft::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void Aircraft::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double Aircraft::speed() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.speed)
  return speed_;
}
void Aircraft::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.speed)
}

// required double altitude = 5;
bool Aircraft::has_altitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Aircraft::set_has_altitude() {
  _has_bits_[0] |= 0x00000010u;
}
void Aircraft::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000010u;
}
void Aircraft::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
double Aircraft::altitude() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.altitude)
  return altitude_;
}
void Aircraft::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.altitude)
}

// required double wind_speed = 6;
bool Aircraft::has_wind_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Aircraft::set_has_wind_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void Aircraft::clear_has_wind_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void Aircraft::clear_wind_speed() {
  wind_speed_ = 0;
  clear_has_wind_speed();
}
double Aircraft::wind_speed() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.wind_speed)
  return wind_speed_;
}
void Aircraft::set_wind_speed(double value) {
  set_has_wind_speed();
  wind_speed_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.wind_speed)
}

// required double wind_direction = 7;
bool Aircraft::has_wind_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Aircraft::set_has_wind_direction() {
  _has_bits_[0] |= 0x00000040u;
}
void Aircraft::clear_has_wind_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
void Aircraft::clear_wind_direction() {
  wind_direction_ = 0;
  clear_has_wind_direction();
}
double Aircraft::wind_direction() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.wind_direction)
  return wind_direction_;
}
void Aircraft::set_wind_direction(double value) {
  set_has_wind_direction();
  wind_direction_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.wind_direction)
}

// required double motor_current = 8;
bool Aircraft::has_motor_current() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Aircraft::set_has_motor_current() {
  _has_bits_[0] |= 0x00000080u;
}
void Aircraft::clear_has_motor_current() {
  _has_bits_[0] &= ~0x00000080u;
}
void Aircraft::clear_motor_current() {
  motor_current_ = 0;
  clear_has_motor_current();
}
double Aircraft::motor_current() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.motor_current)
  return motor_current_;
}
void Aircraft::set_motor_current(double value) {
  set_has_motor_current();
  motor_current_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.motor_current)
}

// required double motor_throttle = 9;
bool Aircraft::has_motor_throttle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Aircraft::set_has_motor_throttle() {
  _has_bits_[0] |= 0x00000100u;
}
void Aircraft::clear_has_motor_throttle() {
  _has_bits_[0] &= ~0x00000100u;
}
void Aircraft::clear_motor_throttle() {
  motor_throttle_ = 0;
  clear_has_motor_throttle();
}
double Aircraft::motor_throttle() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.motor_throttle)
  return motor_throttle_;
}
void Aircraft::set_motor_throttle(double value) {
  set_has_motor_throttle();
  motor_throttle_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.motor_throttle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Waypoints::kWaypointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Waypoints::Waypoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mavProxyLink_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mav.Waypoints)
}
Waypoints::Waypoints(const Waypoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      waypoint_(from.waypoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mav.Waypoints)
}

void Waypoints::SharedCtor() {
  _cached_size_ = 0;
}

Waypoints::~Waypoints() {
  // @@protoc_insertion_point(destructor:mav.Waypoints)
  SharedDtor();
}

void Waypoints::SharedDtor() {
}

void Waypoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoints::descriptor() {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Waypoints& Waypoints::default_instance() {
  protobuf_mavProxyLink_2eproto::InitDefaults();
  return *internal_default_instance();
}

Waypoints* Waypoints::New(::google::protobuf::Arena* arena) const {
  Waypoints* n = new Waypoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Waypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:mav.Waypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Waypoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mav.Waypoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mav.Waypoint waypoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mav.Waypoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mav.Waypoints)
  return false;
#undef DO_
}

void Waypoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mav.Waypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mav.Waypoint waypoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->waypoint(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mav.Waypoints)
}

::google::protobuf::uint8* Waypoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mav.Waypoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mav.Waypoint waypoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->waypoint(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mav.Waypoints)
  return target;
}

size_t Waypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mav.Waypoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mav.Waypoint waypoint = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waypoint(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mav.Waypoints)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Waypoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mav.Waypoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mav.Waypoints)
    MergeFrom(*source);
  }
}

void Waypoints::MergeFrom(const Waypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mav.Waypoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoint_.MergeFrom(from.waypoint_);
}

void Waypoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mav.Waypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoints::CopyFrom(const Waypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mav.Waypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoints::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->waypoint())) return false;
  return true;
}

void Waypoints::Swap(Waypoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Waypoints::InternalSwap(Waypoints* other) {
  using std::swap;
  waypoint_.InternalSwap(&other->waypoint_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Waypoints::GetMetadata() const {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Waypoints

// repeated .mav.Waypoint waypoint = 1;
int Waypoints::waypoint_size() const {
  return waypoint_.size();
}
void Waypoints::clear_waypoint() {
  waypoint_.Clear();
}
const ::mav::Waypoint& Waypoints::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:mav.Waypoints.waypoint)
  return waypoint_.Get(index);
}
::mav::Waypoint* Waypoints::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:mav.Waypoints.waypoint)
  return waypoint_.Mutable(index);
}
::mav::Waypoint* Waypoints::add_waypoint() {
  // @@protoc_insertion_point(field_add:mav.Waypoints.waypoint)
  return waypoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::mav::Waypoint >*
Waypoints::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:mav.Waypoints.waypoint)
  return &waypoint_;
}
const ::google::protobuf::RepeatedPtrField< ::mav::Waypoint >&
Waypoints::waypoint() const {
  // @@protoc_insertion_point(field_list:mav.Waypoints.waypoint)
  return waypoint_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Waypoint::kLatFieldNumber;
const int Waypoint::kLonFieldNumber;
const int Waypoint::kAltitudeFieldNumber;
const int Waypoint::kSpeedFieldNumber;
const int Waypoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Waypoint::Waypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mavProxyLink_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mav.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:mav.Waypoint)
}

void Waypoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(type_));
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:mav.Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
}

void Waypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoint::descriptor() {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Waypoint& Waypoint::default_instance() {
  protobuf_mavProxyLink_2eproto::InitDefaults();
  return *internal_default_instance();
}

Waypoint* Waypoint::New(::google::protobuf::Arena* arena) const {
  Waypoint* n = new Waypoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mav.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mav.Waypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double altitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double speed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mav.Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mav.Waypoint)
  return false;
#undef DO_
}

void Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mav.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double lat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lat(), output);
  }

  // required double lon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lon(), output);
  }

  // required double altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // required double speed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed(), output);
  }

  // required int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mav.Waypoint)
}

::google::protobuf::uint8* Waypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mav.Waypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lat(), target);
  }

  // required double lon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lon(), target);
  }

  // required double altitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  // required double speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed(), target);
  }

  // required int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mav.Waypoint)
  return target;
}

size_t Waypoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mav.Waypoint)
  size_t total_size = 0;

  if (has_lat()) {
    // required double lat = 1;
    total_size += 1 + 8;
  }

  if (has_lon()) {
    // required double lon = 2;
    total_size += 1 + 8;
  }

  if (has_altitude()) {
    // required double altitude = 3;
    total_size += 1 + 8;
  }

  if (has_speed()) {
    // required double speed = 4;
    total_size += 1 + 8;
  }

  if (has_type()) {
    // required int32 type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mav.Waypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double lat = 1;
    total_size += 1 + 8;

    // required double lon = 2;
    total_size += 1 + 8;

    // required double altitude = 3;
    total_size += 1 + 8;

    // required double speed = 4;
    total_size += 1 + 8;

    // required int32 type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mav.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Waypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mav.Waypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mav.Waypoint)
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mav.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000002u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mav.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mav.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Waypoint::Swap(Waypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  swap(lat_, other->lat_);
  swap(lon_, other->lon_);
  swap(altitude_, other->altitude_);
  swap(speed_, other->speed_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Waypoint::GetMetadata() const {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Waypoint

// required double lat = 1;
bool Waypoint::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Waypoint::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void Waypoint::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void Waypoint::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
double Waypoint::lat() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.lat)
  return lat_;
}
void Waypoint::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.lat)
}

// required double lon = 2;
bool Waypoint::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Waypoint::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void Waypoint::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Waypoint::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
double Waypoint::lon() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.lon)
  return lon_;
}
void Waypoint::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.lon)
}

// required double altitude = 3;
bool Waypoint::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Waypoint::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
void Waypoint::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void Waypoint::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
double Waypoint::altitude() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.altitude)
  return altitude_;
}
void Waypoint::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.altitude)
}

// required double speed = 4;
bool Waypoint::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Waypoint::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
void Waypoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
void Waypoint::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
double Waypoint::speed() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.speed)
  return speed_;
}
void Waypoint::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.speed)
}

// required int32 type = 5;
bool Waypoint::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Waypoint::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Waypoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Waypoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 Waypoint::type() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.type)
  return type_;
}
void Waypoint::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AircraftLink::kAircraftsFieldNumber;
const int AircraftLink::kWaypointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AircraftLink::AircraftLink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mavProxyLink_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:mav.AircraftLink)
}
AircraftLink::AircraftLink(const AircraftLink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      aircrafts_(from.aircrafts_),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mav.AircraftLink)
}

void AircraftLink::SharedCtor() {
  _cached_size_ = 0;
}

AircraftLink::~AircraftLink() {
  // @@protoc_insertion_point(destructor:mav.AircraftLink)
  SharedDtor();
}

void AircraftLink::SharedDtor() {
}

void AircraftLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AircraftLink::descriptor() {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AircraftLink& AircraftLink::default_instance() {
  protobuf_mavProxyLink_2eproto::InitDefaults();
  return *internal_default_instance();
}

AircraftLink* AircraftLink::New(::google::protobuf::Arena* arena) const {
  AircraftLink* n = new AircraftLink;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AircraftLink::Clear() {
// @@protoc_insertion_point(message_clear_start:mav.AircraftLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aircrafts_.Clear();
  waypoints_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AircraftLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mav.AircraftLink)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mav.Aircraft aircrafts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aircrafts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mav.Waypoints waypoints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mav.AircraftLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mav.AircraftLink)
  return false;
#undef DO_
}

void AircraftLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mav.AircraftLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mav.Aircraft aircrafts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aircrafts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aircrafts(static_cast<int>(i)), output);
  }

  // repeated .mav.Waypoints waypoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->waypoints(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mav.AircraftLink)
}

::google::protobuf::uint8* AircraftLink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mav.AircraftLink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mav.Aircraft aircrafts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->aircrafts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->aircrafts(static_cast<int>(i)), deterministic, target);
  }

  // repeated .mav.Waypoints waypoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->waypoints(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mav.AircraftLink)
  return target;
}

size_t AircraftLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mav.AircraftLink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mav.Aircraft aircrafts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->aircrafts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aircrafts(static_cast<int>(i)));
    }
  }

  // repeated .mav.Waypoints waypoints = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waypoints(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AircraftLink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mav.AircraftLink)
  GOOGLE_DCHECK_NE(&from, this);
  const AircraftLink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AircraftLink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mav.AircraftLink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mav.AircraftLink)
    MergeFrom(*source);
  }
}

void AircraftLink::MergeFrom(const AircraftLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mav.AircraftLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aircrafts_.MergeFrom(from.aircrafts_);
  waypoints_.MergeFrom(from.waypoints_);
}

void AircraftLink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mav.AircraftLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AircraftLink::CopyFrom(const AircraftLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mav.AircraftLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AircraftLink::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->aircrafts())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->waypoints())) return false;
  return true;
}

void AircraftLink::Swap(AircraftLink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AircraftLink::InternalSwap(AircraftLink* other) {
  using std::swap;
  aircrafts_.InternalSwap(&other->aircrafts_);
  waypoints_.InternalSwap(&other->waypoints_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AircraftLink::GetMetadata() const {
  protobuf_mavProxyLink_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mavProxyLink_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AircraftLink

// repeated .mav.Aircraft aircrafts = 1;
int AircraftLink::aircrafts_size() const {
  return aircrafts_.size();
}
void AircraftLink::clear_aircrafts() {
  aircrafts_.Clear();
}
const ::mav::Aircraft& AircraftLink::aircrafts(int index) const {
  // @@protoc_insertion_point(field_get:mav.AircraftLink.aircrafts)
  return aircrafts_.Get(index);
}
::mav::Aircraft* AircraftLink::mutable_aircrafts(int index) {
  // @@protoc_insertion_point(field_mutable:mav.AircraftLink.aircrafts)
  return aircrafts_.Mutable(index);
}
::mav::Aircraft* AircraftLink::add_aircrafts() {
  // @@protoc_insertion_point(field_add:mav.AircraftLink.aircrafts)
  return aircrafts_.Add();
}
::google::protobuf::RepeatedPtrField< ::mav::Aircraft >*
AircraftLink::mutable_aircrafts() {
  // @@protoc_insertion_point(field_mutable_list:mav.AircraftLink.aircrafts)
  return &aircrafts_;
}
const ::google::protobuf::RepeatedPtrField< ::mav::Aircraft >&
AircraftLink::aircrafts() const {
  // @@protoc_insertion_point(field_list:mav.AircraftLink.aircrafts)
  return aircrafts_;
}

// repeated .mav.Waypoints waypoints = 2;
int AircraftLink::waypoints_size() const {
  return waypoints_.size();
}
void AircraftLink::clear_waypoints() {
  waypoints_.Clear();
}
const ::mav::Waypoints& AircraftLink::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:mav.AircraftLink.waypoints)
  return waypoints_.Get(index);
}
::mav::Waypoints* AircraftLink::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:mav.AircraftLink.waypoints)
  return waypoints_.Mutable(index);
}
::mav::Waypoints* AircraftLink::add_waypoints() {
  // @@protoc_insertion_point(field_add:mav.AircraftLink.waypoints)
  return waypoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::mav::Waypoints >*
AircraftLink::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:mav.AircraftLink.waypoints)
  return &waypoints_;
}
const ::google::protobuf::RepeatedPtrField< ::mav::Waypoints >&
AircraftLink::waypoints() const {
  // @@protoc_insertion_point(field_list:mav.AircraftLink.waypoints)
  return waypoints_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mav

// @@protoc_insertion_point(global_scope)
