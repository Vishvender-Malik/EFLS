// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mavProxyLink.proto

#ifndef PROTOBUF_mavProxyLink_2eproto__INCLUDED
#define PROTOBUF_mavProxyLink_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace mav {
class Aircraft;
class AircraftDefaultTypeInternal;
extern AircraftDefaultTypeInternal _Aircraft_default_instance_;
class AircraftLink;
class AircraftLinkDefaultTypeInternal;
extern AircraftLinkDefaultTypeInternal _AircraftLink_default_instance_;
class Waypoint;
class WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
class Waypoints;
class WaypointsDefaultTypeInternal;
extern WaypointsDefaultTypeInternal _Waypoints_default_instance_;
}  // namespace mav

namespace mav {

namespace protobuf_mavProxyLink_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_mavProxyLink_2eproto

// ===================================================================

class Aircraft : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mav.Aircraft) */ {
 public:
  Aircraft();
  virtual ~Aircraft();

  Aircraft(const Aircraft& from);

  inline Aircraft& operator=(const Aircraft& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Aircraft(Aircraft&& from) noexcept
    : Aircraft() {
    *this = ::std::move(from);
  }

  inline Aircraft& operator=(Aircraft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Aircraft& default_instance();

  static inline const Aircraft* internal_default_instance() {
    return reinterpret_cast<const Aircraft*>(
               &_Aircraft_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Aircraft* other);
  friend void swap(Aircraft& a, Aircraft& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Aircraft* New() const PROTOBUF_FINAL { return New(NULL); }

  Aircraft* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Aircraft& from);
  void MergeFrom(const Aircraft& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Aircraft* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double lat = 1;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // required double lon = 2;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // required double bearing = 3;
  bool has_bearing() const;
  void clear_bearing();
  static const int kBearingFieldNumber = 3;
  double bearing() const;
  void set_bearing(double value);

  // required double speed = 4;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  double speed() const;
  void set_speed(double value);

  // required double altitude = 5;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 5;
  double altitude() const;
  void set_altitude(double value);

  // required double wind_speed = 6;
  bool has_wind_speed() const;
  void clear_wind_speed();
  static const int kWindSpeedFieldNumber = 6;
  double wind_speed() const;
  void set_wind_speed(double value);

  // required double wind_direction = 7;
  bool has_wind_direction() const;
  void clear_wind_direction();
  static const int kWindDirectionFieldNumber = 7;
  double wind_direction() const;
  void set_wind_direction(double value);

  // required double motor_current = 8;
  bool has_motor_current() const;
  void clear_motor_current();
  static const int kMotorCurrentFieldNumber = 8;
  double motor_current() const;
  void set_motor_current(double value);

  // required double motor_throttle = 9;
  bool has_motor_throttle() const;
  void clear_motor_throttle();
  static const int kMotorThrottleFieldNumber = 9;
  double motor_throttle() const;
  void set_motor_throttle(double value);

  // @@protoc_insertion_point(class_scope:mav.Aircraft)
 private:
  void set_has_lat();
  void clear_has_lat();
  void set_has_lon();
  void clear_has_lon();
  void set_has_bearing();
  void clear_has_bearing();
  void set_has_speed();
  void clear_has_speed();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_wind_speed();
  void clear_has_wind_speed();
  void set_has_wind_direction();
  void clear_has_wind_direction();
  void set_has_motor_current();
  void clear_has_motor_current();
  void set_has_motor_throttle();
  void clear_has_motor_throttle();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double lat_;
  double lon_;
  double bearing_;
  double speed_;
  double altitude_;
  double wind_speed_;
  double wind_direction_;
  double motor_current_;
  double motor_throttle_;
  friend struct protobuf_mavProxyLink_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Waypoints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mav.Waypoints) */ {
 public:
  Waypoints();
  virtual ~Waypoints();

  Waypoints(const Waypoints& from);

  inline Waypoints& operator=(const Waypoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Waypoints(Waypoints&& from) noexcept
    : Waypoints() {
    *this = ::std::move(from);
  }

  inline Waypoints& operator=(Waypoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Waypoints& default_instance();

  static inline const Waypoints* internal_default_instance() {
    return reinterpret_cast<const Waypoints*>(
               &_Waypoints_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Waypoints* other);
  friend void swap(Waypoints& a, Waypoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Waypoints* New() const PROTOBUF_FINAL { return New(NULL); }

  Waypoints* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Waypoints& from);
  void MergeFrom(const Waypoints& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Waypoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mav.Waypoint waypoint = 1;
  int waypoint_size() const;
  void clear_waypoint();
  static const int kWaypointFieldNumber = 1;
  const ::mav::Waypoint& waypoint(int index) const;
  ::mav::Waypoint* mutable_waypoint(int index);
  ::mav::Waypoint* add_waypoint();
  ::google::protobuf::RepeatedPtrField< ::mav::Waypoint >*
      mutable_waypoint();
  const ::google::protobuf::RepeatedPtrField< ::mav::Waypoint >&
      waypoint() const;

  // @@protoc_insertion_point(class_scope:mav.Waypoints)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mav::Waypoint > waypoint_;
  friend struct protobuf_mavProxyLink_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Waypoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mav.Waypoint) */ {
 public:
  Waypoint();
  virtual ~Waypoint();

  Waypoint(const Waypoint& from);

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Waypoint& default_instance();

  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Waypoint* other);
  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Waypoint* New() const PROTOBUF_FINAL { return New(NULL); }

  Waypoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Waypoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double lat = 1;
  bool has_lat() const;
  void clear_lat();
  static const int kLatFieldNumber = 1;
  double lat() const;
  void set_lat(double value);

  // required double lon = 2;
  bool has_lon() const;
  void clear_lon();
  static const int kLonFieldNumber = 2;
  double lon() const;
  void set_lon(double value);

  // required double altitude = 3;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  double altitude() const;
  void set_altitude(double value);

  // required double speed = 4;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  double speed() const;
  void set_speed(double value);

  // required int32 type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mav.Waypoint)
 private:
  void set_has_lat();
  void clear_has_lat();
  void set_has_lon();
  void clear_has_lon();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_speed();
  void clear_has_speed();
  void set_has_type();
  void clear_has_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double lat_;
  double lon_;
  double altitude_;
  double speed_;
  ::google::protobuf::int32 type_;
  friend struct protobuf_mavProxyLink_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AircraftLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mav.AircraftLink) */ {
 public:
  AircraftLink();
  virtual ~AircraftLink();

  AircraftLink(const AircraftLink& from);

  inline AircraftLink& operator=(const AircraftLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AircraftLink(AircraftLink&& from) noexcept
    : AircraftLink() {
    *this = ::std::move(from);
  }

  inline AircraftLink& operator=(AircraftLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AircraftLink& default_instance();

  static inline const AircraftLink* internal_default_instance() {
    return reinterpret_cast<const AircraftLink*>(
               &_AircraftLink_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AircraftLink* other);
  friend void swap(AircraftLink& a, AircraftLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AircraftLink* New() const PROTOBUF_FINAL { return New(NULL); }

  AircraftLink* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AircraftLink& from);
  void MergeFrom(const AircraftLink& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AircraftLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mav.Aircraft aircrafts = 1;
  int aircrafts_size() const;
  void clear_aircrafts();
  static const int kAircraftsFieldNumber = 1;
  const ::mav::Aircraft& aircrafts(int index) const;
  ::mav::Aircraft* mutable_aircrafts(int index);
  ::mav::Aircraft* add_aircrafts();
  ::google::protobuf::RepeatedPtrField< ::mav::Aircraft >*
      mutable_aircrafts();
  const ::google::protobuf::RepeatedPtrField< ::mav::Aircraft >&
      aircrafts() const;

  // repeated .mav.Waypoints waypoints = 2;
  int waypoints_size() const;
  void clear_waypoints();
  static const int kWaypointsFieldNumber = 2;
  const ::mav::Waypoints& waypoints(int index) const;
  ::mav::Waypoints* mutable_waypoints(int index);
  ::mav::Waypoints* add_waypoints();
  ::google::protobuf::RepeatedPtrField< ::mav::Waypoints >*
      mutable_waypoints();
  const ::google::protobuf::RepeatedPtrField< ::mav::Waypoints >&
      waypoints() const;

  // @@protoc_insertion_point(class_scope:mav.AircraftLink)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mav::Aircraft > aircrafts_;
  ::google::protobuf::RepeatedPtrField< ::mav::Waypoints > waypoints_;
  friend struct protobuf_mavProxyLink_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Aircraft

// required double lat = 1;
inline bool Aircraft::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Aircraft::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Aircraft::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Aircraft::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double Aircraft::lat() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.lat)
  return lat_;
}
inline void Aircraft::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.lat)
}

// required double lon = 2;
inline bool Aircraft::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Aircraft::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Aircraft::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Aircraft::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double Aircraft::lon() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.lon)
  return lon_;
}
inline void Aircraft::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.lon)
}

// required double bearing = 3;
inline bool Aircraft::has_bearing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Aircraft::set_has_bearing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Aircraft::clear_has_bearing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Aircraft::clear_bearing() {
  bearing_ = 0;
  clear_has_bearing();
}
inline double Aircraft::bearing() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.bearing)
  return bearing_;
}
inline void Aircraft::set_bearing(double value) {
  set_has_bearing();
  bearing_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.bearing)
}

// required double speed = 4;
inline bool Aircraft::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Aircraft::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Aircraft::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Aircraft::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double Aircraft::speed() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.speed)
  return speed_;
}
inline void Aircraft::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.speed)
}

// required double altitude = 5;
inline bool Aircraft::has_altitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Aircraft::set_has_altitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Aircraft::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Aircraft::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Aircraft::altitude() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.altitude)
  return altitude_;
}
inline void Aircraft::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.altitude)
}

// required double wind_speed = 6;
inline bool Aircraft::has_wind_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Aircraft::set_has_wind_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Aircraft::clear_has_wind_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Aircraft::clear_wind_speed() {
  wind_speed_ = 0;
  clear_has_wind_speed();
}
inline double Aircraft::wind_speed() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.wind_speed)
  return wind_speed_;
}
inline void Aircraft::set_wind_speed(double value) {
  set_has_wind_speed();
  wind_speed_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.wind_speed)
}

// required double wind_direction = 7;
inline bool Aircraft::has_wind_direction() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Aircraft::set_has_wind_direction() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Aircraft::clear_has_wind_direction() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Aircraft::clear_wind_direction() {
  wind_direction_ = 0;
  clear_has_wind_direction();
}
inline double Aircraft::wind_direction() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.wind_direction)
  return wind_direction_;
}
inline void Aircraft::set_wind_direction(double value) {
  set_has_wind_direction();
  wind_direction_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.wind_direction)
}

// required double motor_current = 8;
inline bool Aircraft::has_motor_current() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Aircraft::set_has_motor_current() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Aircraft::clear_has_motor_current() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Aircraft::clear_motor_current() {
  motor_current_ = 0;
  clear_has_motor_current();
}
inline double Aircraft::motor_current() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.motor_current)
  return motor_current_;
}
inline void Aircraft::set_motor_current(double value) {
  set_has_motor_current();
  motor_current_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.motor_current)
}

// required double motor_throttle = 9;
inline bool Aircraft::has_motor_throttle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Aircraft::set_has_motor_throttle() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Aircraft::clear_has_motor_throttle() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Aircraft::clear_motor_throttle() {
  motor_throttle_ = 0;
  clear_has_motor_throttle();
}
inline double Aircraft::motor_throttle() const {
  // @@protoc_insertion_point(field_get:mav.Aircraft.motor_throttle)
  return motor_throttle_;
}
inline void Aircraft::set_motor_throttle(double value) {
  set_has_motor_throttle();
  motor_throttle_ = value;
  // @@protoc_insertion_point(field_set:mav.Aircraft.motor_throttle)
}

// -------------------------------------------------------------------

// Waypoints

// repeated .mav.Waypoint waypoint = 1;
inline int Waypoints::waypoint_size() const {
  return waypoint_.size();
}
inline void Waypoints::clear_waypoint() {
  waypoint_.Clear();
}
inline const ::mav::Waypoint& Waypoints::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:mav.Waypoints.waypoint)
  return waypoint_.Get(index);
}
inline ::mav::Waypoint* Waypoints::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:mav.Waypoints.waypoint)
  return waypoint_.Mutable(index);
}
inline ::mav::Waypoint* Waypoints::add_waypoint() {
  // @@protoc_insertion_point(field_add:mav.Waypoints.waypoint)
  return waypoint_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mav::Waypoint >*
Waypoints::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:mav.Waypoints.waypoint)
  return &waypoint_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mav::Waypoint >&
Waypoints::waypoint() const {
  // @@protoc_insertion_point(field_list:mav.Waypoints.waypoint)
  return waypoint_;
}

// -------------------------------------------------------------------

// Waypoint

// required double lat = 1;
inline bool Waypoint::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waypoint::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Waypoint::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Waypoint::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double Waypoint::lat() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.lat)
  return lat_;
}
inline void Waypoint::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.lat)
}

// required double lon = 2;
inline bool Waypoint::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Waypoint::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Waypoint::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Waypoint::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double Waypoint::lon() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.lon)
  return lon_;
}
inline void Waypoint::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.lon)
}

// required double altitude = 3;
inline bool Waypoint::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Waypoint::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Waypoint::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Waypoint::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double Waypoint::altitude() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.altitude)
  return altitude_;
}
inline void Waypoint::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.altitude)
}

// required double speed = 4;
inline bool Waypoint::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Waypoint::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Waypoint::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Waypoint::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double Waypoint::speed() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.speed)
  return speed_;
}
inline void Waypoint::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.speed)
}

// required int32 type = 5;
inline bool Waypoint::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Waypoint::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Waypoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Waypoint::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Waypoint::type() const {
  // @@protoc_insertion_point(field_get:mav.Waypoint.type)
  return type_;
}
inline void Waypoint::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mav.Waypoint.type)
}

// -------------------------------------------------------------------

// AircraftLink

// repeated .mav.Aircraft aircrafts = 1;
inline int AircraftLink::aircrafts_size() const {
  return aircrafts_.size();
}
inline void AircraftLink::clear_aircrafts() {
  aircrafts_.Clear();
}
inline const ::mav::Aircraft& AircraftLink::aircrafts(int index) const {
  // @@protoc_insertion_point(field_get:mav.AircraftLink.aircrafts)
  return aircrafts_.Get(index);
}
inline ::mav::Aircraft* AircraftLink::mutable_aircrafts(int index) {
  // @@protoc_insertion_point(field_mutable:mav.AircraftLink.aircrafts)
  return aircrafts_.Mutable(index);
}
inline ::mav::Aircraft* AircraftLink::add_aircrafts() {
  // @@protoc_insertion_point(field_add:mav.AircraftLink.aircrafts)
  return aircrafts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mav::Aircraft >*
AircraftLink::mutable_aircrafts() {
  // @@protoc_insertion_point(field_mutable_list:mav.AircraftLink.aircrafts)
  return &aircrafts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mav::Aircraft >&
AircraftLink::aircrafts() const {
  // @@protoc_insertion_point(field_list:mav.AircraftLink.aircrafts)
  return aircrafts_;
}

// repeated .mav.Waypoints waypoints = 2;
inline int AircraftLink::waypoints_size() const {
  return waypoints_.size();
}
inline void AircraftLink::clear_waypoints() {
  waypoints_.Clear();
}
inline const ::mav::Waypoints& AircraftLink::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:mav.AircraftLink.waypoints)
  return waypoints_.Get(index);
}
inline ::mav::Waypoints* AircraftLink::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:mav.AircraftLink.waypoints)
  return waypoints_.Mutable(index);
}
inline ::mav::Waypoints* AircraftLink::add_waypoints() {
  // @@protoc_insertion_point(field_add:mav.AircraftLink.waypoints)
  return waypoints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::mav::Waypoints >*
AircraftLink::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:mav.AircraftLink.waypoints)
  return &waypoints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::mav::Waypoints >&
AircraftLink::waypoints() const {
  // @@protoc_insertion_point(field_list:mav.AircraftLink.waypoints)
  return waypoints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace mav

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mavProxyLink_2eproto__INCLUDED
